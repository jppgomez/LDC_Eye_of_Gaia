{
  "version": 3,
  "sources": ["../../canvas-filters/imagefilters.js"],
  "sourcesContent": ["var ImageFilters = {};\nImageFilters.utils = {\n    initSampleCanvas: function () {\n        var _canvas = document.createElement('canvas'),\n            _context = _canvas.getContext('2d');\n\n        _canvas.width = 0;\n        _canvas.height = 0;\n\n        this.getSampleCanvas = function () {\n            return _canvas;\n        };\n        this.getSampleContext = function () {\n            return _context;\n        };\n        this.createImageData = (_context.createImageData) ? function (w, h) {\n                return _context.createImageData(w, h);\n            } : function (w, h) {\n                return new ImageData(w, h);\n            };\n    },\n    getSampleCanvas: function () {\n        this.initSampleCanvas();\n        return this.getSampleCanvas();\n    },\n    getSampleContext: function () {\n        this.initSampleCanvas();\n        return this.getSampleContext();\n    },\n    createImageData: function (w, h) {\n        this.initSampleCanvas();\n        return this.createImageData(w, h);\n    },\n    clamp: function (value) {\n        return value > 255 ? 255 : value < 0 ? 0 : value;\n    },\n    buildMap: function (f) {\n        for (var m = [], k = 0, v; k < 256; k += 1) {\n            m[k] = (v = f(k)) > 255 ? 255 : v < 0 ? 0 : v | 0;\n        }\n        return m;\n    },\n    applyMap: function (src, dst, map) {\n        for (var i = 0, l = src.length; i < l; i += 4) {\n            dst[i]     = map[src[i]];\n            dst[i + 1] = map[src[i + 1]];\n            dst[i + 2] = map[src[i + 2]];\n            dst[i + 3] = src[i + 3];\n        }\n    },\n    mapRGB: function (src, dst, func) {\n        this.applyMap(src, dst, this.buildMap(func));\n    },\n    getPixelIndex: function (x, y, width, height, edge) {\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n            switch (edge) {\n            case 1: // clamp\n                x = x < 0 ? 0 : x >= width ? width - 1 : x;\n                y = y < 0 ? 0 : y >= height ? height - 1 : y;\n                break;\n            case 2: // wrap\n                x = (x %= width) < 0 ? x + width : x;\n                y = (y %= height) < 0 ? y + height : y;\n                break;\n            default: // transparent\n                return null;\n            }\n        }\n        return (y * width + x) << 2;\n    },\n    getPixel: function (src, x, y, width, height, edge) {\n        if (x < 0 || x >= width || y < 0 || y >= height) {\n            switch (edge) {\n            case 1: // clamp\n                x = x < 0 ? 0 : x >= width ? width - 1 : x;\n                y = y < 0 ? 0 : y >= height ? height - 1 : y;\n                break;\n            case 2: // wrap\n                x = (x %= width) < 0 ? x + width : x;\n                y = (y %= height) < 0 ? y + height : y;\n                break;\n            default: // transparent\n                return 0;\n            }\n        }\n\n        var i = (y * width + x) << 2;\n\n        // ARGB\n        return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n    },\n    getPixelByIndex: function (src, i) {\n        return src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n    },\n    /**\n     * one of the most important functions in this library.\n     * I want to make this as fast as possible.\n     */\n    copyBilinear: function (src, x, y, width, height, dst, dstIndex, edge) {\n        var fx = x < 0 ? x - 1 | 0 : x | 0, // Math.floor(x)\n            fy = y < 0 ? y - 1 | 0 : y | 0, // Math.floor(y)\n            wx = x - fx,\n            wy = y - fy,\n            i,\n            nw = 0, ne = 0, sw = 0, se = 0,\n            cx, cy,\n            r, g, b, a;\n\n        if (fx >= 0 && fx < (width - 1) && fy >= 0 && fy < (height - 1)) {\n            // in bounds, no edge actions required\n            i = (fy * width + fx) << 2;\n\n            if (wx || wy) {\n                nw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i += 4;\n                ne = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i = (i - 8) + (width << 2);\n                sw = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n\n                i += 4;\n                se = src[i + 3] << 24 | src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n            }\n            else {\n                // no interpolation required\n                dst[dstIndex]     = src[i];\n                dst[dstIndex + 1] = src[i + 1];\n                dst[dstIndex + 2] = src[i + 2];\n                dst[dstIndex + 3] = src[i + 3];\n                return;\n            }\n        }\n        else {\n            // edge actions required\n            nw = this.getPixel(src, fx, fy, width, height, edge);\n\n            if (wx || wy) {\n                ne = this.getPixel(src, fx + 1, fy, width, height, edge);\n                sw = this.getPixel(src, fx, fy + 1, width, height, edge);\n                se = this.getPixel(src, fx + 1, fy + 1, width, height, edge);\n            }\n            else {\n                // no interpolation required\n                dst[dstIndex]     = nw >> 16 & 0xFF;\n                dst[dstIndex + 1] = nw >> 8  & 0xFF;\n                dst[dstIndex + 2] = nw       & 0xFF;\n                dst[dstIndex + 3] = nw >> 24 & 0xFF;\n                return;\n            }\n        }\n\n        cx = 1 - wx;\n        cy = 1 - wy;\n        r = ((nw >> 16 & 0xFF) * cx + (ne >> 16 & 0xFF) * wx) * cy + ((sw >> 16 & 0xFF) * cx + (se >> 16 & 0xFF) * wx) * wy;\n        g = ((nw >> 8  & 0xFF) * cx + (ne >> 8  & 0xFF) * wx) * cy + ((sw >> 8  & 0xFF) * cx + (se >> 8  & 0xFF) * wx) * wy;\n        b = ((nw       & 0xFF) * cx + (ne       & 0xFF) * wx) * cy + ((sw       & 0xFF) * cx + (se       & 0xFF) * wx) * wy;\n        a = ((nw >> 24 & 0xFF) * cx + (ne >> 24 & 0xFF) * wx) * cy + ((sw >> 24 & 0xFF) * cx + (se >> 24 & 0xFF) * wx) * wy;\n\n        dst[dstIndex]     = r > 255 ? 255 : r < 0 ? 0 : r | 0;\n        dst[dstIndex + 1] = g > 255 ? 255 : g < 0 ? 0 : g | 0;\n        dst[dstIndex + 2] = b > 255 ? 255 : b < 0 ? 0 : b | 0;\n        dst[dstIndex + 3] = a > 255 ? 255 : a < 0 ? 0 : a | 0;\n    },\n    /**\n     * @param r 0 <= n <= 255\n     * @param g 0 <= n <= 255\n     * @param b 0 <= n <= 255\n     * @return Array(h, s, l)\n     */\n    rgbToHsl: function (r, g, b) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n//        var max = Math.max(r, g, b),\n//            min = Math.min(r, g, b),\n        var max = (r > g) ? (r > b) ? r : b : (g > b) ? g : b,\n            min = (r < g) ? (r < b) ? r : b : (g < b) ? g : b,\n            chroma = max - min,\n            h = 0,\n            s = 0,\n            // Lightness\n            l = (min + max) / 2;\n\n        if (chroma !== 0) {\n            // Hue\n            if (r === max) {\n                h = (g - b) / chroma + ((g < b) ? 6 : 0);\n            }\n            else if (g === max) {\n                h = (b - r) / chroma + 2;\n            }\n            else {\n                h = (r - g) / chroma + 4;\n            }\n            h /= 6;\n\n            // Saturation\n            s = (l > 0.5) ? chroma / (2 - max - min) : chroma / (max + min);\n        }\n\n        return [h, s, l];\n    },\n    /**\n     * @param h 0.0 <= n <= 1.0\n     * @param s 0.0 <= n <= 1.0\n     * @param l 0.0 <= n <= 1.0\n     * @return Array(r, g, b)\n     */\n    hslToRgb: function (h, s, l) {\n        var m1, m2, hue,\n            r, g, b,\n            rgb = [];\n\n        if (s === 0) {\n            r = g = b = l * 255 + 0.5 | 0;\n            rgb = [r, g, b];\n        }\n        else {\n            if (l <= 0.5) {\n                m2 = l * (s + 1);\n            }\n            else {\n                m2 = l + s - l * s;\n            }\n\n            m1 = l * 2 - m2;\n            hue = h + 1 / 3;\n\n            var tmp;\n            for (var i = 0; i < 3; i += 1) {\n                if (hue < 0) {\n                    hue += 1;\n                }\n                else if (hue > 1) {\n                    hue -= 1;\n                }\n\n                if (6 * hue < 1) {\n                    tmp = m1 + (m2 - m1) * hue * 6;\n                }\n                else if (2 * hue < 1) {\n                    tmp = m2;\n                }\n                else if (3 * hue < 2) {\n                    tmp = m1 + (m2 - m1) * (2 / 3 - hue) * 6;\n                }\n                else {\n                    tmp = m1;\n                }\n\n                rgb[i] = tmp * 255 + 0.5 | 0;\n\n                hue -= 1 / 3;\n            }\n        }\n\n        return rgb;\n    }\n};\n\n\n// TODO\nImageFilters.Translate = function (srcImageData, x, y, interpolation) {\n\n};\nImageFilters.Scale = function (srcImageData, scaleX, scaleY, interpolation) {\n\n};\nImageFilters.Rotate = function (srcImageData, originX, originY, angle, resize, interpolation) {\n\n};\nImageFilters.Affine = function (srcImageData, matrix, resize, interpolation) {\n\n};\nImageFilters.UnsharpMask = function (srcImageData, level) {\n\n};\n\nImageFilters.ConvolutionFilter = function (srcImageData, matrixX, matrixY, matrix, divisor, bias, preserveAlpha, clamp, color, alpha) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    divisor = divisor || 1;\n    bias = bias || 0;\n\n    // default true\n    (preserveAlpha !== false) && (preserveAlpha = true);\n    (clamp !== false) && (clamp = true);\n\n    color = color || 0;\n    alpha = alpha || 0;\n\n    var index = 0,\n        rows = matrixX >> 1,\n        cols = matrixY >> 1,\n        clampR = color >> 16 & 0xFF,\n        clampG = color >>  8 & 0xFF,\n        clampB = color       & 0xFF,\n        clampA = alpha * 0xFF;\n\n    for (var y = 0; y < srcHeight; y += 1) {\n        for (var x = 0; x < srcWidth; x += 1, index += 4) {\n            var r = 0,\n                g = 0,\n                b = 0,\n                a = 0,\n                replace = false,\n                mIndex = 0,\n                v;\n\n            for (var row = -rows; row <= rows; row += 1) {\n                var rowIndex = y + row,\n                    offset;\n\n                if (0 <= rowIndex && rowIndex < srcHeight) {\n                    offset = rowIndex * srcWidth;\n                }\n                else if (clamp) {\n                    offset = y * srcWidth;\n                }\n                else {\n                    replace = true;\n                }\n\n                for (var col = -cols; col <= cols; col += 1) {\n                    var m = matrix[mIndex++];\n\n                    if (m !== 0) {\n                        var colIndex = x + col;\n\n                        if (!(0 <= colIndex && colIndex < srcWidth)) {\n                            if (clamp) {\n                                colIndex = x;\n                            }\n                            else {\n                                replace = true;\n                            }\n                        }\n\n                        if (replace) {\n                            r += m * clampR;\n                            g += m * clampG;\n                            b += m * clampB;\n                            a += m * clampA;\n                        }\n                        else {\n                            var p = (offset + colIndex) << 2;\n                            r += m * srcPixels[p];\n                            g += m * srcPixels[p + 1];\n                            b += m * srcPixels[p + 2];\n                            a += m * srcPixels[p + 3];\n                        }\n                    }\n                }\n            }\n\n            dstPixels[index]     = (v = r / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 1] = (v = g / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 2] = (v = b / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n            dstPixels[index + 3] = preserveAlpha ? srcPixels[index + 3] : (v = a / divisor + bias) > 255 ? 255 : v < 0 ? 0 : v | 0;\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param threshold 0.0 <= n <= 1.0\n */\nImageFilters.Binarize = function (srcImageData, threshold) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    if (isNaN(threshold)) {\n        threshold = 0.5;\n    }\n\n    threshold *= 255;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var avg = srcPixels[i] + srcPixels[i + 1] + srcPixels[i + 2] / 3;\n\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg <= threshold ? 0 : 255;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.BlendAdd = function (srcImageData, blendImageData, dx, dy) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data,\n        blendPixels  = blendImageData.data;\n\n    var v;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = ((v = srcPixels[i]     + blendPixels[i])     > 255) ? 255 : v;\n        dstPixels[i + 1] = ((v = srcPixels[i + 1] + blendPixels[i + 1]) > 255) ? 255 : v;\n        dstPixels[i + 2] = ((v = srcPixels[i + 2] + blendPixels[i + 2]) > 255) ? 255 : v;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.BlendSubtract = function (srcImageData, blendImageData, dx, dy) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data,\n        blendPixels  = blendImageData.data;\n\n    var v;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = ((v = srcPixels[i]     - blendPixels[i])     < 0) ? 0 : v;\n        dstPixels[i + 1] = ((v = srcPixels[i + 1] - blendPixels[i + 1]) < 0) ? 0 : v;\n        dstPixels[i + 2] = ((v = srcPixels[i + 2] - blendPixels[i + 2]) < 0) ? 0 : v;\n        dstPixels[i + 3] = 255;\n    }\n\n    return dstImageData;\n};\n\n/**\n * Algorithm based on BoxBlurFilter.java by Huxtable.com\n * @see http://www.jhlabs.com/ip/blurring.html\n * Copyright 2005 Huxtable.com. All rights reserved.\n */\nImageFilters.BoxBlur = (function () {\n    var blur = function(src, dst, width, height, radius) {\n        var tableSize = radius * 2 + 1;\n        var radiusPlus1 = radius + 1;\n        var widthMinus1 = width - 1;\n\n        var r, g, b, a;\n\n        var srcIndex = 0;\n        var dstIndex;\n        var p, next, prev;\n        var i, l, x, y,\n            nextIndex, prevIndex;\n\n        var sumTable = [];\n        for (i = 0, l = 256 * tableSize; i < l; i += 1) {\n            sumTable[i] = i / tableSize | 0;\n        }\n\n        for (y = 0; y < height; y += 1) {\n            r = g = b = a = 0;\n            dstIndex = y;\n\n            p = srcIndex << 2;\n            r += radiusPlus1 * src[p];\n            g += radiusPlus1 * src[p + 1];\n            b += radiusPlus1 * src[p + 2];\n            a += radiusPlus1 * src[p + 3];\n\n            for (i = 1; i <= radius; i += 1) {\n                p = (srcIndex + (i < width ? i : widthMinus1)) << 2;\n                r += src[p];\n                g += src[p + 1];\n                b += src[p + 2];\n                a += src[p + 3];\n            }\n\n            for (x = 0; x < width; x += 1) {\n                p = dstIndex << 2;\n                dst[p]     = sumTable[r];\n                dst[p + 1] = sumTable[g];\n                dst[p + 2] = sumTable[b];\n                dst[p + 3] = sumTable[a];\n\n                nextIndex = x + radiusPlus1;\n                if (nextIndex > widthMinus1) {\n                    nextIndex = widthMinus1;\n                }\n\n                prevIndex = x - radius;\n                if (prevIndex < 0) {\n                    prevIndex = 0;\n                }\n\n                next = (srcIndex + nextIndex) << 2;\n                prev = (srcIndex + prevIndex) << 2;\n\n                r += src[next]     - src[prev];\n                g += src[next + 1] - src[prev + 1];\n                b += src[next + 2] - src[prev + 2];\n                a += src[next + 3] - src[prev + 3];\n\n                dstIndex += height;\n            }\n            srcIndex += width;\n        }\n    };\n\n    return function (srcImageData, hRadius, vRadius, quality) {\n        var srcPixels    = srcImageData.data,\n            srcWidth     = srcImageData.width,\n            srcHeight    = srcImageData.height,\n            srcLength    = srcPixels.length,\n            dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n            dstPixels    = dstImageData.data,\n            tmpImageData = this.utils.createImageData(srcWidth, srcHeight),\n            tmpPixels    = tmpImageData.data;\n\n        for (var i = 0; i < quality; i += 1) {\n            // only use the srcPixels on the first loop\n            blur(i ? dstPixels : srcPixels, tmpPixels, srcWidth, srcHeight, hRadius);\n            blur(tmpPixels, dstPixels, srcHeight, srcWidth, vRadius);\n        }\n\n        return dstImageData;\n    };\n}());\n\n/**\n * @ param strength 1 <= n <= 4\n */\nImageFilters.GaussianBlur = function (srcImageData, strength) {\n    var size, matrix, divisor;\n\n    switch (strength) {\n    case 2:\n        size = 5;\n        matrix = [\n            1, 1, 2, 1, 1,\n            1, 2, 4, 2, 1,\n            2, 4, 8, 4, 2,\n            1, 2, 4, 2, 1,\n            1, 1, 2, 1, 1\n        ];\n        divisor = 52;\n        break;\n    case 3:\n        size = 7;\n        matrix = [\n            1, 1, 2,  2, 2, 1, 1,\n            1, 2, 2,  4, 2, 2, 1,\n            2, 2, 4,  8, 4, 2, 2,\n            2, 4, 8, 16, 8, 4, 2,\n            2, 2, 4,  8, 4, 2, 2,\n            1, 2, 2,  4, 2, 2, 1,\n            1, 1, 2,  2, 2, 1, 1\n        ];\n        divisor = 140;\n        break;\n    case 4:\n        size = 15;\n        matrix = [\n            2 ,2 , 3 , 4 , 5 , 5 , 6 , 6 , 6 , 5 , 5 , 4 , 3 ,2 ,2,\n            2 ,3 , 4 , 5 , 7 , 7 , 8 , 8 , 8 , 7 , 7 , 5 , 4 ,3 ,2,\n            3 ,4 , 6 , 7 , 9 ,10 ,10 ,11 ,10 ,10 , 9 , 7 , 6 ,4 ,3,\n            4 ,5 , 7 , 9 ,10 ,12 ,13 ,13 ,13 ,12 ,10 , 9 , 7 ,5 ,4,\n            5 ,7 , 9 ,11 ,13 ,14 ,15 ,16 ,15 ,14 ,13 ,11 , 9 ,7 ,5,\n            5 ,7 ,10 ,12 ,14 ,16 ,17 ,18 ,17 ,16 ,14 ,12 ,10 ,7 ,5,\n            6 ,8 ,10 ,13 ,15 ,17 ,19 ,19 ,19 ,17 ,15 ,13 ,10 ,8 ,6,\n            6 ,8 ,11 ,13 ,16 ,18 ,19 ,20 ,19 ,18 ,16 ,13 ,11 ,8 ,6,\n            6 ,8 ,10 ,13 ,15 ,17 ,19 ,19 ,19 ,17 ,15 ,13 ,10 ,8 ,6,\n            5 ,7 ,10 ,12 ,14 ,16 ,17 ,18 ,17 ,16 ,14 ,12 ,10 ,7 ,5,\n            5 ,7 , 9 ,11 ,13 ,14 ,15 ,16 ,15 ,14 ,13 ,11 , 9 ,7 ,5,\n            4 ,5 , 7 , 9 ,10 ,12 ,13 ,13 ,13 ,12 ,10 , 9 , 7 ,5 ,4,\n            3 ,4 , 6 , 7 , 9 ,10 ,10 ,11 ,10 ,10 , 9 , 7 , 6 ,4 ,3,\n            2 ,3 , 4 , 5 , 7 , 7 , 8 , 8 , 8 , 7 , 7 , 5 , 4 ,3 ,2,\n            2 ,2 , 3 , 4 , 5 , 5 , 6 , 6 , 6 , 5 , 5 , 4 , 3 ,2 ,2\n        ];\n        divisor = 2044;\n        break;\n    default:\n        size = 3;\n        matrix = [\n            1, 2, 1,\n            2, 4, 2,\n            1, 2, 1\n        ];\n        divisor = 16;\n        break;\n    }\n    return this.ConvolutionFilter(srcImageData, size, size, matrix, divisor, 0, false);\n};\n\n/**\n * Stack Blur Algorithm by Mario Klingemann <mario@quasimondo.com>\n * @see http://incubator.quasimondo.com/processing/fast_blur_deluxe.php\n */\n/*\nCopyright (c) 2010 Mario Klingemann\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\nImageFilters.StackBlur = (function () {\n    var mul_table = [\n        512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,\n        454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,\n        482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,\n        437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,\n        497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,\n        320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,\n        446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,\n        329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,\n        505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,\n        399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,\n        324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,\n        268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,\n        451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,\n        385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,\n        332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,\n        289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];\n\n\n    var shg_table = [\n         9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n        17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n        19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n        22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n        23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n        24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];\n\n    function BlurStack() {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.next = null;\n    }\n\n    return function (srcImageData, radius) {\n        var srcPixels    = srcImageData.data,\n            srcWidth     = srcImageData.width,\n            srcHeight    = srcImageData.height,\n            srcLength    = srcPixels.length,\n            dstImageData = this.Clone(srcImageData),\n            dstPixels    = dstImageData.data;\n\n        var x, y, i, p, yp, yi, yw,\n            r_sum, g_sum, b_sum, a_sum,\n            r_out_sum, g_out_sum, b_out_sum, a_out_sum,\n            r_in_sum, g_in_sum, b_in_sum, a_in_sum,\n            pr, pg, pb, pa, rbs,\n            div = radius + radius + 1,\n            w4 = srcWidth << 2,\n            widthMinus1  = srcWidth - 1,\n            heightMinus1 = srcHeight - 1,\n            radiusPlus1  = radius + 1,\n            sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2,\n            stackStart = new BlurStack(),\n            stack = stackStart,\n            stackIn, stackOut, stackEnd,\n            mul_sum = mul_table[radius],\n            shg_sum = shg_table[radius];\n\n        for (i = 1; i < div; i += 1) {\n            stack = stack.next = new BlurStack();\n            if (i == radiusPlus1) {\n                stackEnd = stack;\n            }\n        }\n\n        stack.next = stackStart;\n        yw = yi = 0;\n\n        for (y = 0; y < srcHeight; y += 1) {\n            r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n            r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for (i = 0; i < radiusPlus1; i += 1) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            for (i = 1; i < radiusPlus1; i += 1) {\n                p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n                r_sum += (stack.r = (pr = dstPixels[p])) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = (pg = dstPixels[p + 1])) * rbs;\n                b_sum += (stack.b = (pb = dstPixels[p + 2])) * rbs;\n                a_sum += (stack.a = (pa = dstPixels[p + 3])) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n            }\n\n            stackIn = stackStart;\n            stackOut = stackEnd;\n\n            for (x = 0; x < srcWidth; x += 1) {\n                dstPixels[yi]     = (r_sum * mul_sum) >> shg_sum;\n                dstPixels[yi + 1] = (g_sum * mul_sum) >> shg_sum;\n                dstPixels[yi + 2] = (b_sum * mul_sum) >> shg_sum;\n                dstPixels[yi + 3] = (a_sum * mul_sum) >> shg_sum;\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n                r_in_sum += (stackIn.r = dstPixels[p]);\n                g_in_sum += (stackIn.g = dstPixels[p + 1]);\n                b_in_sum += (stackIn.b = dstPixels[p + 2]);\n                a_in_sum += (stackIn.a = dstPixels[p + 3]);\n\n                r_sum += r_in_sum;\n                g_sum += g_in_sum;\n                b_sum += b_in_sum;\n                a_sum += a_in_sum;\n\n                stackIn = stackIn.next;\n\n                r_out_sum += (pr = stackOut.r);\n                g_out_sum += (pg = stackOut.g);\n                b_out_sum += (pb = stackOut.b);\n                a_out_sum += (pa = stackOut.a);\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += 4;\n            }\n\n            yw += srcWidth;\n        }\n\n        for (x = 0; x < srcWidth; x += 1) {\n            g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n            yi = x << 2;\n            r_out_sum = radiusPlus1 * (pr = dstPixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = dstPixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = dstPixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = dstPixels[yi + 3]);\n\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n\n            stack = stackStart;\n\n            for (i = 0; i < radiusPlus1; i += 1) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n\n            yp = srcWidth;\n\n            for (i = 1; i <= radius; i += 1) {\n                yi = (yp + x) << 2;\n\n                r_sum += (stack.r = (pr = dstPixels[yi])) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = (pg = dstPixels[yi + 1])) * rbs;\n                b_sum += (stack.b = (pb = dstPixels[yi + 2])) * rbs;\n                a_sum += (stack.a = (pa = dstPixels[yi + 3])) * rbs;\n\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n\n                stack = stack.next;\n\n                if (i < heightMinus1) {\n                    yp += srcWidth;\n                }\n            }\n\n            yi = x;\n            stackIn = stackStart;\n            stackOut = stackEnd;\n\n            for (y = 0; y < srcHeight; y += 1) {\n                p = yi << 2;\n                dstPixels[p]     = (r_sum * mul_sum) >> shg_sum;\n                dstPixels[p + 1] = (g_sum * mul_sum) >> shg_sum;\n                dstPixels[p + 2] = (b_sum * mul_sum) >> shg_sum;\n                dstPixels[p + 3] = (a_sum * mul_sum) >> shg_sum;\n\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n\n                p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * srcWidth)) << 2;\n\n                r_sum += (r_in_sum += (stackIn.r = dstPixels[p]));\n                g_sum += (g_in_sum += (stackIn.g = dstPixels[p + 1]));\n                b_sum += (b_in_sum += (stackIn.b = dstPixels[p + 2]));\n                a_sum += (a_in_sum += (stackIn.a = dstPixels[p + 3]));\n\n                stackIn = stackIn.next;\n\n                r_out_sum += (pr = stackOut.r);\n                g_out_sum += (pg = stackOut.g);\n                b_out_sum += (pb = stackOut.b);\n                a_out_sum += (pa = stackOut.a);\n\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n\n                stackOut = stackOut.next;\n\n                yi += srcWidth;\n            }\n        }\n\n        return dstImageData;\n    }\n}());\n\n/**\n * TV based algorithm\n */\nImageFilters.Brightness = function (srcImageData, brightness) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value += brightness;\n        return (value > 255) ? 255 : value;\n    });\n\n    return dstImageData;\n};\n\n/**\n * GIMP algorithm modified. pretty close to fireworks\n * @param brightness -100 <= n <= 100\n * @param contrast -100 <= n <= 100\n */\nImageFilters.BrightnessContrastGimp = function (srcImageData, brightness, contrast) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data,\n        p4           = Math.PI / 4;\n\n    // fix to -1 <= n <= 1\n    brightness /= 100;\n\n    // fix to -99 <= n <= 99\n    contrast *= 0.99;\n    // fix to -1 < n < 1\n    contrast /= 100;\n    // apply GIMP formula\n    contrast = Math.tan((contrast + 1) * p4);\n\n    // get the average color\n    for (var avg = 0, i = 0; i < srcLength; i += 4) {\n        avg += (srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471) >> 16;\n    }\n    avg = avg / (srcLength / 4);\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        if (brightness < 0) {\n            value = value * (1 + brightness);\n        }\n        else if (brightness > 0) {\n            value = value + ((255 - value) * brightness);\n        }\n        //value += brightness;\n\n        if (contrast !== 0) {\n            value = (value - avg) * contrast + avg;\n        }\n        return value + 0.5 | 0;\n    });\n    return dstImageData;\n};\n\n/**\n * more like the new photoshop algorithm\n * @param brightness -100 <= n <= 100\n * @param contrast -100 <= n <= 100\n */\nImageFilters.BrightnessContrastPhotoshop = function (srcImageData, brightness, contrast) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    // fix to 0 <= n <= 2;\n    brightness = (brightness + 100) / 100;\n    contrast = (contrast + 100) / 100;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value *= brightness;\n        value = (value - 127.5) * contrast + 127.5;\n        return value + 0.5 | 0;\n    });\n    return dstImageData;\n};\n\nImageFilters.Channels = function (srcImageData, channel) {\n    var matrix;\n\n    switch (channel) {\n        case 2: // green\n            matrix = [\n                0, 1, 0, 0, 0,\n                0, 1, 0, 0, 0,\n                0, 1, 0, 0, 0,\n                0, 0, 0, 1, 0\n            ];\n            break;\n        case 3: // blue\n            matrix = [\n                0, 0, 1, 0, 0,\n                0, 0, 1, 0, 0,\n                0, 0, 1, 0, 0,\n                0, 0, 0, 1, 0\n            ];\n            break;\n        default: // red\n            matrix = [\n                1, 0, 0, 0, 0,\n                1, 0, 0, 0, 0,\n                1, 0, 0, 0, 0,\n                0, 0, 0, 1, 0\n            ];\n            break;\n\n    }\n\n    return this.ColorMatrixFilter(srcImageData, matrix);\n};\n\nImageFilters.Clone = function (srcImageData) {\n    return this.Copy(srcImageData, this.utils.createImageData(srcImageData.width, srcImageData.height));\n};\n\n/**\n * slower\n */\nImageFilters.CloneBuiltin = function (srcImageData) {\n    var srcWidth  = srcImageData.width,\n        srcHeight = srcImageData.height,\n        canvas    = this.utils.getSampleCanvas(),\n        context   = this.utils.getSampleContext(),\n        dstImageData;\n\n    canvas.width  = srcWidth;\n    canvas.height = srcHeight;\n\n    context.putImageData(srcImageData, 0, 0);\n    dstImageData = context.getImageData(0, 0, srcWidth, srcHeight);\n\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return dstImageData;\n};\n\nImageFilters.ColorMatrixFilter = function (srcImageData, matrix) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var m0  = matrix[0],\n        m1  = matrix[1],\n        m2  = matrix[2],\n        m3  = matrix[3],\n        m4  = matrix[4],\n        m5  = matrix[5],\n        m6  = matrix[6],\n        m7  = matrix[7],\n        m8  = matrix[8],\n        m9  = matrix[9],\n        m10 = matrix[10],\n        m11 = matrix[11],\n        m12 = matrix[12],\n        m13 = matrix[13],\n        m14 = matrix[14],\n        m15 = matrix[15],\n        m16 = matrix[16],\n        m17 = matrix[17],\n        m18 = matrix[18],\n        m19 = matrix[19];\n\n    var value, i, r, g, b, a;\n    for (i = 0; i < srcLength; i += 4) {\n        r = srcPixels[i];\n        g = srcPixels[i + 1];\n        b = srcPixels[i + 2];\n        a = srcPixels[i + 3];\n\n        dstPixels[i]     = (value = r *  m0 + g *  m1 + b *  m2 + a *  m3 +  m4) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 1] = (value = r *  m5 + g *  m6 + b *  m7 + a *  m8 +  m9) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 2] = (value = r * m10 + g * m11 + b * m12 + a * m13 + m14) > 255 ? 255 : value < 0 ? 0 : value | 0;\n        dstPixels[i + 3] = (value = r * m15 + g * m16 + b * m17 + a * m18 + m19) > 255 ? 255 : value < 0 ? 0 : value | 0;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.ColorTransformFilter = function (\n        srcImageData, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier,\n        redOffset, greenOffset, blueOffset, alphaOffset) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var i, v;\n    for (i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = (v = srcPixels[i]     * redMultiplier   + redOffset)   > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 1] = (v = srcPixels[i + 1] * greenMultiplier + greenOffset) > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 2] = (v = srcPixels[i + 2] * blueMultiplier  + blueOffset)  > 255 ? 255 : v < 0 ? 0 : v;\n        dstPixels[i + 3] = (v = srcPixels[i + 3] * alphaMultiplier + alphaOffset) > 255 ? 255 : v < 0 ? 0 : v;\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Copy = function (srcImageData, dstImageData) {\n    var srcPixels = srcImageData.data,\n        srcLength = srcPixels.length,\n        dstPixels = dstImageData.data;\n\n    while (srcLength--) {\n        dstPixels[srcLength] = srcPixels[srcLength];\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Crop = function (srcImageData, x, y, width, height) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels    = dstImageData.data;\n\n    var srcLeft   = Math.max(x, 0),\n        srcTop    = Math.max(y, 0),\n        srcRight  = Math.min(x + width, srcWidth),\n        srcBottom = Math.min(y + height, srcHeight),\n        dstLeft   = srcLeft - x,\n        dstTop    = srcTop - y,\n        srcRow, srcCol, srcIndex, dstIndex;\n\n    for (srcRow = srcTop, dstRow = dstTop; srcRow < srcBottom; srcRow += 1, dstRow += 1) {\n        for (srcCol = srcLeft, dstCol = dstLeft; srcCol < srcRight; srcCol += 1, dstCol += 1) {\n            srcIndex = (srcRow * srcWidth + srcCol) << 2;\n            dstIndex = (dstRow * width    + dstCol) << 2;\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.CropBuiltin = function (srcImageData, x, y, width, height) {\n    var srcWidth  = srcImageData.width,\n        srcHeight = srcImageData.height,\n        canvas    = this.utils.getSampleCanvas(),\n        context   = this.utils.getSampleContext();\n\n    canvas.width = srcWidth;\n    canvas.height = srcHeight;\n    context.putImageData(srcImageData, 0, 0);\n    var result = context.getImageData(x, y, width, height);\n\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return result;\n};\n\n/**\n * sets to the average of the highest and lowest contrast\n */\nImageFilters.Desaturate = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var r = srcPixels[i],\n            g = srcPixels[i + 1],\n            b = srcPixels[i + 2],\n            max = (r > g) ? (r > b) ? r : b : (g > b) ? g : b,\n            min = (r < g) ? (r < b) ? r : b : (g < b) ? g : b,\n            avg = ((max + min) / 2) + 0.5 | 0;\n\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = avg;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\n * TODO: use bilinear\n */\nImageFilters.DisplacementMapFilter = function (srcImageData, mapImageData, mapX, mapY, componentX, componentY, scaleX, scaleY, mode) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n//        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstImageData = ImageFilters.Clone(srcImageData),\n        dstPixels    = dstImageData.data;\n\n    mapX || (mapX = 0);\n    mapY || (mapY = 0);\n    componentX || (componentX = 0); // red?\n    componentY || (componentY = 0);\n    scaleX || (scaleX = 0);\n    scaleY || (scaleY = 0);\n    mode || (mode = 2); // wrap\n\n    var mapWidth  = mapImageData.width,\n        mapHeight = mapImageData.height,\n        mapPixels = mapImageData.data,\n        mapRight  = mapWidth + mapX,\n        mapBottom = mapHeight + mapY,\n        dstIndex, srcIndex, mapIndex,\n        cx, cy, tx, ty, x, y;\n\n    for (x = 0; x < srcWidth; x += 1) {\n        for (y = 0; y < srcHeight; y += 1) {\n\n            dstIndex = (y * srcWidth + x) << 2;\n\n            if (x < mapX || y < mapY || x >= mapRight || y >= mapBottom) {\n                // out of the map bounds\n                // copy src to dst\n                srcIndex = dstIndex;\n            } else {\n                // apply map\n                mapIndex = ((y - mapY) * mapWidth + (x - mapX)) << 2;\n\n                // tx = x + ((componentX(x, y) - 128) * scaleX) / 256\n                cx = mapPixels[mapIndex + componentX];\n                tx = x + (((cx - 128) * scaleX) >> 8);\n\n                // tx = y + ((componentY(x, y) - 128) * scaleY) / 256\n                cy = mapPixels[mapIndex + componentY];\n                ty = y + (((cy - 128) * scaleY) >> 8);\n\n                srcIndex = ImageFilters.utils.getPixelIndex(tx + 0.5 | 0, ty + 0.5 | 0, srcWidth, srcHeight, mode);\n                if (srcIndex === null) {\n                    // if mode == ignore and (tx,ty) is out of src bounds\n                    // then copy (x,y) to dst\n                    srcIndex = dstIndex;\n                }\n            }\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * Floyd-Steinberg algorithm\n * @param levels 2 <= n <= 255\n */\nImageFilters.Dither = function (srcImageData, levels) {\n    var srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        dstImageData = this.Clone(srcImageData),\n        dstPixels    = dstImageData.data;\n\n    levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n\n    // Build a color map using the same algorithm as the posterize filter.\n    var posterize,\n        levelMap = [],\n        levelsMinus1 = levels - 1,\n        j = 0,\n        k = 0,\n        i;\n\n    for (i = 0; i < levels; i += 1) {\n        levelMap[i] = (255 * i) / levelsMinus1;\n    }\n\n    posterize = this.utils.buildMap(function (value) {\n        var ret = levelMap[j];\n\n        k += levels;\n\n        if (k > 255) {\n            k -= 255;\n            j += 1;\n        }\n\n        return ret;\n    });\n\n    // Apply the dithering algorithm to each pixel\n    var x, y,\n        index,\n        old_r, old_g, old_b,\n        new_r, new_g, new_b,\n        err_r, err_g, err_b,\n        nbr_r, nbr_g, nbr_b,\n        srcWidthMinus1 = srcWidth - 1,\n        srcHeightMinus1 = srcHeight - 1,\n        A = 7 / 16,\n        B = 3 / 16,\n        C = 5 / 16,\n        D = 1 / 16;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            // Get the current pixel.\n            index = (y * srcWidth + x) << 2;\n\n            old_r = dstPixels[index];\n            old_g = dstPixels[index + 1];\n            old_b = dstPixels[index + 2];\n\n            // Quantize using the color map\n            new_r = posterize[old_r];\n            new_g = posterize[old_g];\n            new_b = posterize[old_b];\n\n            // Set the current pixel.\n            dstPixels[index]     = new_r;\n            dstPixels[index + 1] = new_g;\n            dstPixels[index + 2] = new_b;\n\n            // Quantization errors\n            err_r = old_r - new_r;\n            err_g = old_g - new_g;\n            err_b = old_b - new_b;\n\n            // Apply the matrix.\n            // x + 1, y\n            index += 1 << 2;\n            if (x < srcWidthMinus1) {\n                nbr_r = dstPixels[index]     + A * err_r;\n                nbr_g = dstPixels[index + 1] + A * err_g;\n                nbr_b = dstPixels[index + 2] + A * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x - 1, y + 1\n            index += (srcWidth - 2) << 2;\n            if (x > 0 && y < srcHeightMinus1) {\n                nbr_r = dstPixels[index]     + B * err_r;\n                nbr_g = dstPixels[index + 1] + B * err_g;\n                nbr_b = dstPixels[index + 2] + B * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x, y + 1\n            index += 1 << 2;\n            if (y < srcHeightMinus1) {\n                nbr_r = dstPixels[index]     + C * err_r;\n                nbr_g = dstPixels[index + 1] + C * err_g;\n                nbr_b = dstPixels[index + 2] + C * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n\n            // x + 1, y + 1\n            index += 1 << 2;\n            if (x < srcWidthMinus1 && y < srcHeightMinus1) {\n                nbr_r = dstPixels[index]     + D * err_r;\n                nbr_g = dstPixels[index + 1] + D * err_g;\n                nbr_b = dstPixels[index + 2] + D * err_b;\n\n                dstPixels[index]     = nbr_r > 255 ? 255 : nbr_r < 0 ? 0 : nbr_r | 0;\n                dstPixels[index + 1] = nbr_g > 255 ? 255 : nbr_g < 0 ? 0 : nbr_g | 0;\n                dstPixels[index + 2] = nbr_b > 255 ? 255 : nbr_b < 0 ? 0 : nbr_b | 0;\n            }\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Edge = function (srcImageData) {\n    //pretty close to Fireworks 'Find Edges' effect\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n        -1, -1, -1,\n        -1,  8, -1,\n        -1, -1, -1\n    ]);\n};\n\nImageFilters.Emboss = function (srcImageData) {\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n        -2, -1, 0,\n        -1,  1, 1,\n         0,  1, 2\n    ]);\n};\n\nImageFilters.Enrich = function (srcImageData) {\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n         0, -2,  0,\n        -2, 20, -2,\n         0, -2,  0\n    ], 10, -40);\n};\n\nImageFilters.Flip = function (srcImageData, vertical) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var x, y, srcIndex, dstIndex, i;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            srcIndex = (y * srcWidth + x) << 2;\n            if (vertical) {\n                dstIndex = ((srcHeight - y - 1) * srcWidth + x) << 2;\n            }\n            else {\n                dstIndex = (y * srcWidth + (srcWidth - x - 1)) << 2;\n            }\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Gamma = function (srcImageData, gamma) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value = (255 * Math.pow(value / 255, 1 / gamma) + 0.5);\n        return value > 255 ? 255 : value + 0.5 | 0;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.GrayScale = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        var intensity = (srcPixels[i] * 19595 + srcPixels[i + 1] * 38470 + srcPixels[i + 2] * 7471) >> 16;\n        //var intensity = (srcPixels[i] * 0.3086 + srcPixels[i + 1] * 0.6094 + srcPixels[i + 2] * 0.0820) | 0;\n        dstPixels[i] = dstPixels[i + 1] = dstPixels[i + 2] = intensity;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param hueDelta  -180 <= n <= 180\n * @param satDelta  -100 <= n <= 100\n * @param lightness -100 <= n <= 100\n */\nImageFilters.HSLAdjustment = function (srcImageData, hueDelta, satDelta, lightness) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    hueDelta /= 360;\n    satDelta /= 100;\n    lightness /= 100;\n\n    var rgbToHsl = this.utils.rgbToHsl;\n    var hslToRgb = this.utils.hslToRgb;\n    var h, s, l, hsl, rgb, i;\n\n    for (i = 0; i < srcLength; i += 4) {\n        // convert to HSL\n        hsl = rgbToHsl(srcPixels[i], srcPixels[i + 1], srcPixels[i + 2]);\n\n        // hue\n        h = hsl[0] + hueDelta;\n        while (h < 0) {\n            h += 1;\n        }\n        while (h > 1) {\n            h -= 1;\n        }\n\n        // saturation\n        s = hsl[1] + hsl[1] * satDelta;\n        if (s < 0) {\n            s = 0;\n        }\n        else if (s > 1) {\n            s = 1;\n        }\n\n        // lightness\n        l = hsl[2];\n        if (lightness > 0) {\n            l += (1 - l) * lightness;\n        }\n        else if (lightness < 0) {\n            l += l * lightness;\n        }\n\n        // convert back to rgb\n        rgb = hslToRgb(h, s, l);\n\n        dstPixels[i]     = rgb[0];\n        dstPixels[i + 1] = rgb[1];\n        dstPixels[i + 2] = rgb[2];\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\nImageFilters.Invert = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        return 255 - value;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.Mosaic = function (srcImageData, blockSize) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var cols = Math.ceil(srcWidth / blockSize),\n        rows = Math.ceil(srcHeight / blockSize),\n        row, col,\n        x_start, x_end, y_start, y_end,\n        x, y, yIndex, index, size,\n        r, g, b, a;\n\n    for (row = 0; row < rows; row += 1) {\n        y_start = row * blockSize;\n        y_end   = y_start + blockSize;\n\n        if (y_end > srcHeight) {\n            y_end = srcHeight;\n        }\n\n        for (col = 0; col < cols; col += 1) {\n            x_start = col * blockSize;\n            x_end   = x_start + blockSize;\n\n            if (x_end > srcWidth) {\n                x_end = srcWidth;\n            }\n\n            // get the average color from the src\n            r = g = b = a = 0;\n            size = (x_end - x_start) * (y_end - y_start);\n\n            for (y = y_start; y < y_end; y += 1) {\n                yIndex = y * srcWidth;\n\n                for (x = x_start; x < x_end; x += 1) {\n                    index = (yIndex + x) << 2;\n                    r += srcPixels[index];\n                    g += srcPixels[index + 1];\n                    b += srcPixels[index + 2];\n                    a += srcPixels[index + 3];\n                }\n            }\n\n            r = (r / size) + 0.5 | 0;\n            g = (g / size) + 0.5 | 0;\n            b = (b / size) + 0.5 | 0;\n            a = (a / size) + 0.5 | 0;\n\n            // fill the dst with that color\n            for (y = y_start; y < y_end; y += 1) {\n                yIndex = y * srcWidth;\n\n                for (x = x_start; x < x_end; x += 1) {\n                    index = (yIndex + x) << 2;\n                    dstPixels[index]     = r;\n                    dstPixels[index + 1] = g;\n                    dstPixels[index + 2] = b;\n                    dstPixels[index + 3] = a;\n                }\n            }\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param range  1 <= n <= 5\n * @param levels 1 <= n <= 256\n */\nImageFilters.Oil = function (srcImageData, range, levels) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var index = 0,\n        rh = [],\n        gh = [],\n        bh = [],\n        rt = [],\n        gt = [],\n        bt = [],\n        x, y, i, row, col,\n        rowIndex, colIndex, offset, srcIndex,\n        sr, sg, sb, ri, gi, bi,\n        r, g, b;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            for (i = 0; i < levels; i += 1) {\n                rh[i] = gh[i] = bh[i] = rt[i] = gt[i] = bt[i] = 0;\n            }\n\n            for (row = -range; row <= range; row += 1) {\n                rowIndex = y + row;\n\n                if (rowIndex < 0 || rowIndex >= srcHeight) {\n                    continue;\n                }\n\n                offset = rowIndex * srcWidth;\n\n                for (col = -range; col <= range; col += 1) {\n                    colIndex = x + col;\n                    if (colIndex < 0 || colIndex >= srcWidth) {\n                        continue;\n                    }\n\n                    srcIndex = (offset + colIndex) << 2;\n                    sr = srcPixels[srcIndex];\n                    sg = srcPixels[srcIndex + 1];\n                    sb = srcPixels[srcIndex + 2];\n                    ri = (sr * levels) >> 8;\n                    gi = (sg * levels) >> 8;\n                    bi = (sb * levels) >> 8;\n                    rt[ri] += sr;\n                    gt[gi] += sg;\n                    bt[bi] += sb;\n                    rh[ri] += 1;\n                    gh[gi] += 1;\n                    bh[bi] += 1;\n                }\n            }\n\n            r = g = b = 0;\n            for (i = 1; i < levels; i += 1) {\n                if(rh[i] > rh[r]) {\n                    r = i;\n                }\n                if(gh[i] > gh[g]) {\n                    g = i;\n                }\n                if(bh[i] > bh[b]) {\n                    b = i;\n                }\n            }\n\n            dstPixels[index]     = rt[r] / rh[r] | 0;\n            dstPixels[index + 1] = gt[g] / gh[g] | 0;\n            dstPixels[index + 2] = bt[b] / bh[b] | 0;\n            dstPixels[index + 3] = srcPixels[index + 3];\n            index += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\nImageFilters.OpacityFilter = function (srcImageData, opacity) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    for (var i = 0; i < srcLength; i += 4) {\n        dstPixels[i]     = srcPixels[i];\n        dstPixels[i + 1] = srcPixels[i + 1];\n        dstPixels[i + 2] = srcPixels[i + 2];\n        dstPixels[i + 3] = opacity;\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param levels 2 <= n <= 255\n */\nImageFilters.Posterize = function (srcImageData, levels) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    levels = levels < 2 ? 2 : levels > 255 ? 255 : levels;\n\n    var levelMap = [],\n        levelsMinus1 = levels - 1,\n        j = 0,\n        k = 0,\n        i;\n\n    for (i = 0; i < levels; i += 1) {\n        levelMap[i] = (255 * i) / levelsMinus1;\n    }\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        var ret = levelMap[j];\n\n        k += levels;\n\n        if (k > 255) {\n            k -= 255;\n            j += 1;\n        }\n\n        return ret;\n    });\n\n    return dstImageData;\n};\n\n/**\n * @param scale 0.0 <= n <= 5.0\n */\nImageFilters.Rescale = function (srcImageData, scale) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        value *= scale;\n        return (value > 255) ? 255 : value + 0.5 | 0;\n    });\n\n    return dstImageData;\n};\n\n/**\n * Nearest neighbor\n */\nImageFilters.ResizeNearestNeighbor = function (srcImageData, width, height) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels    = dstImageData.data;\n\n    var xFactor = srcWidth / width,\n        yFactor = srcHeight / height,\n        dstIndex = 0, srcIndex,\n        x, y, offset;\n\n    for (y = 0; y < height; y += 1) {\n        offset = ((y * yFactor) | 0) * srcWidth;\n\n        for (x = 0; x < width; x += 1) {\n            srcIndex = (offset + x * xFactor) << 2;\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * Bilinear\n */\nImageFilters.Resize = function (srcImageData, width, height) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(width, height),\n        dstPixels    = dstImageData.data;\n\n    var xFactor = srcWidth / width,\n        yFactor = srcHeight / height,\n        dstIndex = 0,\n        x, y;\n\n    for (y = 0; y < height; y += 1) {\n        for (x = 0; x < width; x += 1) {\n            this.utils.copyBilinear(srcPixels, x * xFactor, y * yFactor, srcWidth, srcHeight, dstPixels, dstIndex, 0);\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\n\n/**\n * faster resizing using the builtin context.scale()\n * the resizing algorithm may be different between browsers\n * this might not work if the image is transparent.\n * to fix that we probably need two contexts\n */\nImageFilters.ResizeBuiltin = function (srcImageData, width, height) {\n    var srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        canvas    = this.utils.getSampleCanvas(),\n        context   = this.utils.getSampleContext(),\n        dstImageData;\n\n    canvas.width  = Math.max(srcWidth, width);\n    canvas.height = Math.max(srcHeight, height);\n    context.save();\n\n    context.putImageData(srcImageData, 0, 0);\n    context.scale(width / srcWidth, height / srcHeight);\n    context.drawImage(canvas, 0, 0);\n\n    dstImageData = context.getImageData(0, 0, width, height);\n\n    context.restore();\n    canvas.width = 0;\n    canvas.height = 0;\n\n    return dstImageData;\n};\n\nImageFilters.Sepia = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    var r, g, b, i, value;\n\n    for (i = 0; i < srcLength; i += 4) {\n        r = srcPixels[i];\n        g = srcPixels[i + 1];\n        b = srcPixels[i + 2];\n\n        dstPixels[i]     = (value = r * 0.393 + g * 0.769 + b * 0.189) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 1] = (value = r * 0.349 + g * 0.686 + b * 0.168) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 2] = (value = r * 0.272 + g * 0.534 + b * 0.131) > 255 ? 255 : value < 0 ? 0 : value + 0.5 | 0;\n        dstPixels[i + 3] = srcPixels[i + 3];\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param factor 1 <= n\n */\nImageFilters.Sharpen = function (srcImageData, factor) {\n    //Convolution formula from VIGRA\n    return this.ConvolutionFilter(srcImageData, 3, 3, [\n        -factor/16,     -factor/8,      -factor/16,\n        -factor/8,       factor*0.75+1, -factor/8,\n        -factor/16,     -factor/8,      -factor/16\n    ]);\n};\n\nImageFilters.Solarize = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    this.utils.mapRGB(srcPixels, dstPixels, function (value) {\n        return value > 127 ? (value - 127.5) * 2 : (127.5 - value) * 2;\n    });\n\n    return dstImageData;\n};\n\nImageFilters.Transpose = function (srcImageData) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcHeight, srcWidth),\n        dstPixels    = dstImageData.data;\n\n    var srcIndex, dstIndex;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            srcIndex = (y * srcWidth + x) << 2;\n            dstIndex = (x * srcHeight + y) << 2;\n\n            dstPixels[dstIndex]     = srcPixels[srcIndex];\n            dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n            dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n            dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n        }\n    }\n\n    return dstImageData;\n};\n\n/**\n * @param centerX 0.0 <= n <= 1.0\n * @param centerY 0.0 <= n <= 1.0\n * @param radius\n * @param angle(degree)\n * @param smooth\n */\nImageFilters.Twril = function (srcImageData, centerX, centerY, radius, angle, edge, smooth) {\n    var srcPixels    = srcImageData.data,\n        srcWidth     = srcImageData.width,\n        srcHeight    = srcImageData.height,\n        srcLength    = srcPixels.length,\n        dstImageData = this.utils.createImageData(srcWidth, srcHeight),\n        dstPixels    = dstImageData.data;\n\n    //convert position to px\n    centerX = srcWidth  * centerX;\n    centerY = srcHeight * centerY;\n\n    // degree to radian\n    angle *= (Math.PI / 180);\n\n    var radius2 = radius * radius,\n        max_y = srcHeight - 1,\n        max_x = srcWidth - 1,\n        dstIndex = 0,\n        x, y, dx, dy, distance, a, tx, ty, srcIndex, pixel, i;\n\n    for (y = 0; y < srcHeight; y += 1) {\n        for (x = 0; x < srcWidth; x += 1) {\n            dx = x - centerX;\n            dy = y - centerY;\n            distance = dx * dx + dy * dy;\n\n            if (distance > radius2) {\n                // out of the effected area. just copy the pixel\n                dstPixels[dstIndex]     = srcPixels[dstIndex];\n                dstPixels[dstIndex + 1] = srcPixels[dstIndex + 1];\n                dstPixels[dstIndex + 2] = srcPixels[dstIndex + 2];\n                dstPixels[dstIndex + 3] = srcPixels[dstIndex + 3];\n            }\n            else {\n                // main formula\n                distance = Math.sqrt(distance);\n                a  = Math.atan2(dy, dx) + (angle * (radius - distance)) / radius;\n                tx = centerX + distance * Math.cos(a);\n                ty = centerY + distance * Math.sin(a);\n\n                // copy target pixel\n                if (smooth) {\n                    // bilinear\n                    this.utils.copyBilinear(srcPixels, tx, ty, srcWidth, srcHeight, dstPixels, dstIndex, edge);\n                }\n                else {\n                    // nearest neighbor\n                    // round tx, ty\n                    // TODO edge actions!!\n                    srcIndex = ((ty + 0.5 | 0) * srcWidth + (tx + 0.5 | 0)) << 2;\n                    dstPixels[dstIndex]     = srcPixels[srcIndex];\n                    dstPixels[dstIndex + 1] = srcPixels[srcIndex + 1];\n                    dstPixels[dstIndex + 2] = srcPixels[srcIndex + 2];\n                    dstPixels[dstIndex + 3] = srcPixels[srcIndex + 3];\n                }\n            }\n\n            dstIndex += 4;\n        }\n    }\n\n    return dstImageData;\n};\n\nmodule.exports = ImageFilters;\n"],
  "mappings": "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AI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,MAAG;AAG/D,UAAI,YAAY;AAAA,QACX;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAC5D;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,QAAI;AAAA,MAAG;AAE/D,eAAS,YAAY;AACjB,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,IAAI;AACT,aAAK,OAAO;AAAA,MAChB;AAEA,aAAO,SAAU,cAAc,QAAQ;AACnC,YAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,YAAY,GACtC,YAAe,aAAa;AAEhC,YAAIA,IAAGC,IAAG,GAAG,GAAG,IAAI,IAAI,IACpB,OAAO,OAAO,OAAO,OACrB,WAAW,WAAW,WAAW,WACjC,UAAU,UAAU,UAAU,UAC9B,IAAI,IAAI,IAAI,IAAI,KAChB,MAAM,SAAS,SAAS,GACxB,KAAK,YAAY,GACjB,cAAe,WAAW,GAC1B,eAAe,YAAY,GAC3B,cAAe,SAAS,GACxB,YAAY,eAAgB,cAAc,KAAM,GAChD,aAAa,IAAI,UAAU,GAC3B,QAAQ,YACR,SAAS,UAAU,UACnB,UAAU,UAAU,MAAM,GAC1B,UAAU,UAAU,MAAM;AAE9B,aAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AACzB,kBAAQ,MAAM,OAAO,IAAI,UAAU;AACnC,cAAI,KAAK,aAAa;AAClB,uBAAW;AAAA,UACf;AAAA,QACJ;AAEA,cAAM,OAAO;AACb,aAAK,KAAK;AAEV,aAAKA,KAAI,GAAGA,KAAI,WAAWA,MAAK,GAAG;AAC/B,qBAAW,WAAW,WAAW,WAAW,QAAQ,QAAQ,QAAQ,QAAQ;AAE5E,sBAAY,eAAe,KAAK,UAAU,EAAE;AAC5C,sBAAY,eAAe,KAAK,UAAU,KAAK,CAAC;AAChD,sBAAY,eAAe,KAAK,UAAU,KAAK,CAAC;AAChD,sBAAY,eAAe,KAAK,UAAU,KAAK,CAAC;AAEhD,mBAAS,YAAY;AACrB,mBAAS,YAAY;AACrB,mBAAS,YAAY;AACrB,mBAAS,YAAY;AAErB,kBAAQ;AAER,eAAK,IAAI,GAAG,IAAI,aAAa,KAAK,GAAG;AACjC,kBAAM,IAAI;AACV,kBAAM,IAAI;AACV,kBAAM,IAAI;AACV,kBAAM,IAAI;AACV,oBAAQ,MAAM;AAAA,UAClB;AAEA,eAAK,IAAI,GAAG,IAAI,aAAa,KAAK,GAAG;AACjC,gBAAI,OAAO,cAAc,IAAI,cAAc,MAAM;AACjD,sBAAU,MAAM,IAAK,KAAK,UAAU,CAAC,MAAO,MAAM,cAAc;AAChE,sBAAU,MAAM,IAAK,KAAK,UAAU,IAAI,CAAC,KAAM;AAC/C,sBAAU,MAAM,IAAK,KAAK,UAAU,IAAI,CAAC,KAAM;AAC/C,sBAAU,MAAM,IAAK,KAAK,UAAU,IAAI,CAAC,KAAM;AAE/C,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AAEZ,oBAAQ,MAAM;AAAA,UAClB;AAEA,oBAAU;AACV,qBAAW;AAEX,eAAKD,KAAI,GAAGA,KAAI,UAAUA,MAAK,GAAG;AAC9B,sBAAU,EAAE,IAAS,QAAQ,WAAY;AACzC,sBAAU,KAAK,CAAC,IAAK,QAAQ,WAAY;AACzC,sBAAU,KAAK,CAAC,IAAK,QAAQ,WAAY;AACzC,sBAAU,KAAK,CAAC,IAAK,QAAQ,WAAY;AAEzC,qBAAS;AACT,qBAAS;AACT,qBAAS;AACT,qBAAS;AAET,yBAAa,QAAQ;AACrB,yBAAa,QAAQ;AACrB,yBAAa,QAAQ;AACrB,yBAAa,QAAQ;AAErB,gBAAM,OAAO,IAAIA,KAAI,SAAS,KAAK,cAAc,IAAI,gBAAiB;AAEtE,wBAAa,QAAQ,IAAI,UAAU,CAAC;AACpC,wBAAa,QAAQ,IAAI,UAAU,IAAI,CAAC;AACxC,wBAAa,QAAQ,IAAI,UAAU,IAAI,CAAC;AACxC,wBAAa,QAAQ,IAAI,UAAU,IAAI,CAAC;AAExC,qBAAS;AACT,qBAAS;AACT,qBAAS;AACT,qBAAS;AAET,sBAAU,QAAQ;AAElB,yBAAc,KAAK,SAAS;AAC5B,yBAAc,KAAK,SAAS;AAC5B,yBAAc,KAAK,SAAS;AAC5B,yBAAc,KAAK,SAAS;AAE5B,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AAEZ,uBAAW,SAAS;AAEpB,kBAAM;AAAA,UACV;AAEA,gBAAM;AAAA,QACV;AAEA,aAAKA,KAAI,GAAGA,KAAI,UAAUA,MAAK,GAAG;AAC9B,qBAAW,WAAW,WAAW,WAAW,QAAQ,QAAQ,QAAQ,QAAQ;AAE5E,eAAKA,MAAK;AACV,sBAAY,eAAe,KAAK,UAAU,EAAE;AAC5C,sBAAY,eAAe,KAAK,UAAU,KAAK,CAAC;AAChD,sBAAY,eAAe,KAAK,UAAU,KAAK,CAAC;AAChD,sBAAY,eAAe,KAAK,UAAU,KAAK,CAAC;AAEhD,mBAAS,YAAY;AACrB,mBAAS,YAAY;AACrB,mBAAS,YAAY;AACrB,mBAAS,YAAY;AAErB,kBAAQ;AAER,eAAK,IAAI,GAAG,IAAI,aAAa,KAAK,GAAG;AACjC,kBAAM,IAAI;AACV,kBAAM,IAAI;AACV,kBAAM,IAAI;AACV,kBAAM,IAAI;AACV,oBAAQ,MAAM;AAAA,UAClB;AAEA,eAAK;AAEL,eAAK,IAAI,GAAG,KAAK,QAAQ,KAAK,GAAG;AAC7B,iBAAM,KAAKA,MAAM;AAEjB,sBAAU,MAAM,IAAK,KAAK,UAAU,EAAE,MAAO,MAAM,cAAc;AACjE,sBAAU,MAAM,IAAK,KAAK,UAAU,KAAK,CAAC,KAAM;AAChD,sBAAU,MAAM,IAAK,KAAK,UAAU,KAAK,CAAC,KAAM;AAChD,sBAAU,MAAM,IAAK,KAAK,UAAU,KAAK,CAAC,KAAM;AAEhD,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AAEZ,oBAAQ,MAAM;AAEd,gBAAI,IAAI,cAAc;AAClB,oBAAM;AAAA,YACV;AAAA,UACJ;AAEA,eAAKA;AACL,oBAAU;AACV,qBAAW;AAEX,eAAKC,KAAI,GAAGA,KAAI,WAAWA,MAAK,GAAG;AAC/B,gBAAI,MAAM;AACV,sBAAU,CAAC,IAAS,QAAQ,WAAY;AACxC,sBAAU,IAAI,CAAC,IAAK,QAAQ,WAAY;AACxC,sBAAU,IAAI,CAAC,IAAK,QAAQ,WAAY;AACxC,sBAAU,IAAI,CAAC,IAAK,QAAQ,WAAY;AAExC,qBAAS;AACT,qBAAS;AACT,qBAAS;AACT,qBAAS;AAET,yBAAa,QAAQ;AACrB,yBAAa,QAAQ;AACrB,yBAAa,QAAQ;AACrB,yBAAa,QAAQ;AAErB,gBAAKD,OAAO,IAAIC,KAAI,eAAe,eAAe,IAAI,gBAAgB,YAAc;AAEpF,qBAAU,YAAa,QAAQ,IAAI,UAAU,CAAC;AAC9C,qBAAU,YAAa,QAAQ,IAAI,UAAU,IAAI,CAAC;AAClD,qBAAU,YAAa,QAAQ,IAAI,UAAU,IAAI,CAAC;AAClD,qBAAU,YAAa,QAAQ,IAAI,UAAU,IAAI,CAAC;AAElD,sBAAU,QAAQ;AAElB,yBAAc,KAAK,SAAS;AAC5B,yBAAc,KAAK,SAAS;AAC5B,yBAAc,KAAK,SAAS;AAC5B,yBAAc,KAAK,SAAS;AAE5B,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AACZ,wBAAY;AAEZ,uBAAW,SAAS;AAEpB,kBAAM;AAAA,UACV;AAAA,QACJ;AAEA,eAAO;AAAA,MACX;AAAA,IACJ,EAAE;AAKF,iBAAa,aAAa,SAAU,cAAc,YAAY;AAC1D,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,iBAAS;AACT,eAAQ,QAAQ,MAAO,MAAM;AAAA,MACjC,CAAC;AAED,aAAO;AAAA,IACX;AAOA,iBAAa,yBAAyB,SAAU,cAAc,YAAY,UAAU;AAChF,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa,MAC5B,KAAe,KAAK,KAAK;AAG7B,oBAAc;AAGd,kBAAY;AAEZ,kBAAY;AAEZ,iBAAW,KAAK,KAAK,WAAW,KAAK,EAAE;AAGvC,eAAS,MAAM,GAAG,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AAC5C,eAAQ,UAAU,CAAC,IAAI,QAAQ,UAAU,IAAI,CAAC,IAAI,QAAQ,UAAU,IAAI,CAAC,IAAI,QAAS;AAAA,MAC1F;AACA,YAAM,OAAO,YAAY;AAEzB,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,YAAI,aAAa,GAAG;AAChB,kBAAQ,SAAS,IAAI;AAAA,QACzB,WACS,aAAa,GAAG;AACrB,kBAAQ,SAAU,MAAM,SAAS;AAAA,QACrC;AAGA,YAAI,aAAa,GAAG;AAChB,mBAAS,QAAQ,OAAO,WAAW;AAAA,QACvC;AACA,eAAO,QAAQ,MAAM;AAAA,MACzB,CAAC;AACD,aAAO;AAAA,IACX;AAOA,iBAAa,8BAA8B,SAAU,cAAc,YAAY,UAAU;AACrF,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAGhC,oBAAc,aAAa,OAAO;AAClC,kBAAY,WAAW,OAAO;AAE9B,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,iBAAS;AACT,iBAAS,QAAQ,SAAS,WAAW;AACrC,eAAO,QAAQ,MAAM;AAAA,MACzB,CAAC;AACD,aAAO;AAAA,IACX;AAEA,iBAAa,WAAW,SAAU,cAAc,SAAS;AACrD,UAAI;AAEJ,cAAQ,SAAS;AAAA,QACb,KAAK;AACD,mBAAS;AAAA,YACL;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,UAChB;AACA;AAAA,QACJ,KAAK;AACD,mBAAS;AAAA,YACL;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,UAChB;AACA;AAAA,QACJ;AACI,mBAAS;AAAA,YACL;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YACZ;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,YAAG;AAAA,UAChB;AACA;AAAA,MAER;AAEA,aAAO,KAAK,kBAAkB,cAAc,MAAM;AAAA,IACtD;AAEA,iBAAa,QAAQ,SAAU,cAAc;AACzC,aAAO,KAAK,KAAK,cAAc,KAAK,MAAM,gBAAgB,aAAa,OAAO,aAAa,MAAM,CAAC;AAAA,IACtG;AAKA,iBAAa,eAAe,SAAU,cAAc;AAChD,UAAI,WAAY,aAAa,OACzB,YAAY,aAAa,QACzB,SAAY,KAAK,MAAM,gBAAgB,GACvC,UAAY,KAAK,MAAM,iBAAiB,GACxC;AAEJ,aAAO,QAAS;AAChB,aAAO,SAAS;AAEhB,cAAQ,aAAa,cAAc,GAAG,CAAC;AACvC,qBAAe,QAAQ,aAAa,GAAG,GAAG,UAAU,SAAS;AAE7D,aAAO,QAAQ;AACf,aAAO,SAAS;AAEhB,aAAO;AAAA,IACX;AAEA,iBAAa,oBAAoB,SAAU,cAAc,QAAQ;AAC7D,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,UAAI,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,KAAM,OAAO,CAAC,GACd,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE,GACf,MAAM,OAAO,EAAE;AAEnB,UAAI,OAAO,GAAG,GAAG,GAAG,GAAG;AACvB,WAAK,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AAC/B,YAAI,UAAU,CAAC;AACf,YAAI,UAAU,IAAI,CAAC;AACnB,YAAI,UAAU,IAAI,CAAC;AACnB,YAAI,UAAU,IAAI,CAAC;AAEnB,kBAAU,CAAC,KAAS,QAAQ,IAAK,KAAK,IAAK,KAAK,IAAK,KAAK,IAAK,KAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAC/G,kBAAU,IAAI,CAAC,KAAK,QAAQ,IAAK,KAAK,IAAK,KAAK,IAAK,KAAK,IAAK,KAAM,MAAM,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAC/G,kBAAU,IAAI,CAAC,KAAK,QAAQ,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAC/G,kBAAU,IAAI,CAAC,KAAK,QAAQ,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAAA,MACnH;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,uBAAuB,SAC5B,cAAc,eAAe,iBAAiB,gBAAgB,iBAC9D,WAAW,aAAa,YAAY,aAAa;AACrD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,UAAI,GAAG;AACP,WAAK,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AAC/B,kBAAU,CAAC,KAAS,IAAI,UAAU,CAAC,IAAQ,gBAAkB,aAAe,MAAM,MAAM,IAAI,IAAI,IAAI;AACpG,kBAAU,IAAI,CAAC,KAAK,IAAI,UAAU,IAAI,CAAC,IAAI,kBAAkB,eAAe,MAAM,MAAM,IAAI,IAAI,IAAI;AACpG,kBAAU,IAAI,CAAC,KAAK,IAAI,UAAU,IAAI,CAAC,IAAI,iBAAkB,cAAe,MAAM,MAAM,IAAI,IAAI,IAAI;AACpG,kBAAU,IAAI,CAAC,KAAK,IAAI,UAAU,IAAI,CAAC,IAAI,kBAAkB,eAAe,MAAM,MAAM,IAAI,IAAI,IAAI;AAAA,MACxG;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,OAAO,SAAU,cAAc,cAAc;AACtD,UAAI,YAAY,aAAa,MACzB,YAAY,UAAU,QACtB,YAAY,aAAa;AAE7B,aAAO,aAAa;AAChB,kBAAU,SAAS,IAAI,UAAU,SAAS;AAAA,MAC9C;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,OAAO,SAAU,cAAcD,IAAGC,IAAG,OAAO,QAAQ;AAC7D,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,OAAO,MAAM,GACvD,YAAe,aAAa;AAEhC,UAAI,UAAY,KAAK,IAAID,IAAG,CAAC,GACzB,SAAY,KAAK,IAAIC,IAAG,CAAC,GACzB,WAAY,KAAK,IAAID,KAAI,OAAO,QAAQ,GACxC,YAAY,KAAK,IAAIC,KAAI,QAAQ,SAAS,GAC1C,UAAY,UAAUD,IACtB,SAAY,SAASC,IACrB,QAAQ,QAAQ,UAAU;AAE9B,WAAK,SAAS,QAAQ,SAAS,QAAQ,SAAS,WAAW,UAAU,GAAG,UAAU,GAAG;AACjF,aAAK,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,UAAU,GAAG,UAAU,GAAG;AAClF,qBAAY,SAAS,WAAW,UAAW;AAC3C,qBAAY,SAAS,QAAW,UAAW;AAC3C,oBAAU,QAAQ,IAAQ,UAAU,QAAQ;AAC5C,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,QACpD;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,cAAc,SAAU,cAAcD,IAAGC,IAAG,OAAO,QAAQ;AACpE,UAAI,WAAY,aAAa,OACzB,YAAY,aAAa,QACzB,SAAY,KAAK,MAAM,gBAAgB,GACvC,UAAY,KAAK,MAAM,iBAAiB;AAE5C,aAAO,QAAQ;AACf,aAAO,SAAS;AAChB,cAAQ,aAAa,cAAc,GAAG,CAAC;AACvC,UAAI,SAAS,QAAQ,aAAaD,IAAGC,IAAG,OAAO,MAAM;AAErD,aAAO,QAAQ;AACf,aAAO,SAAS;AAEhB,aAAO;AAAA,IACX;AAKA,iBAAa,aAAa,SAAU,cAAc;AAC9C,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AACnC,YAAI,IAAI,UAAU,CAAC,GACf,IAAI,UAAU,IAAI,CAAC,GACnB,IAAI,UAAU,IAAI,CAAC,GACnB,MAAO,IAAI,IAAM,IAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,GAChD,MAAO,IAAI,IAAM,IAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,GAChD,OAAQ,MAAM,OAAO,IAAK,MAAM;AAEpC,kBAAU,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI;AACrD,kBAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC;AAAA,MACtC;AAEA,aAAO;AAAA,IACX;AAKA,iBAAa,wBAAwB,SAAU,cAAc,cAAc,MAAM,MAAM,YAAY,YAAY,QAAQ,QAAQ,MAAM;AACjI,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QAEzB,eAAe,aAAa,MAAM,YAAY,GAC9C,YAAe,aAAa;AAEhC,eAAS,OAAO;AAChB,eAAS,OAAO;AAChB,qBAAe,aAAa;AAC5B,qBAAe,aAAa;AAC5B,iBAAW,SAAS;AACpB,iBAAW,SAAS;AACpB,eAAS,OAAO;AAEhB,UAAI,WAAY,aAAa,OACzB,YAAY,aAAa,QACzB,YAAY,aAAa,MACzB,WAAY,WAAW,MACvB,YAAY,YAAY,MACxB,UAAU,UAAU,UACpB,IAAI,IAAI,IAAI,IAAID,IAAGC;AAEvB,WAAKD,KAAI,GAAGA,KAAI,UAAUA,MAAK,GAAG;AAC9B,aAAKC,KAAI,GAAGA,KAAI,WAAWA,MAAK,GAAG;AAE/B,qBAAYA,KAAI,WAAWD,MAAM;AAEjC,cAAIA,KAAI,QAAQC,KAAI,QAAQD,MAAK,YAAYC,MAAK,WAAW;AAGzD,uBAAW;AAAA,UACf,OAAO;AAEH,wBAAaA,KAAI,QAAQ,YAAYD,KAAI,SAAU;AAGnD,iBAAK,UAAU,WAAW,UAAU;AACpC,iBAAKA,OAAO,KAAK,OAAO,UAAW;AAGnC,iBAAK,UAAU,WAAW,UAAU;AACpC,iBAAKC,OAAO,KAAK,OAAO,UAAW;AAEnC,uBAAW,aAAa,MAAM,cAAc,KAAK,MAAM,GAAG,KAAK,MAAM,GAAG,UAAU,WAAW,IAAI;AACjG,gBAAI,aAAa,MAAM;AAGnB,yBAAW;AAAA,YACf;AAAA,UACJ;AAEA,oBAAU,QAAQ,IAAQ,UAAU,QAAQ;AAC5C,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,QACpD;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAMA,iBAAa,SAAS,SAAU,cAAc,QAAQ;AAClD,UAAI,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,eAAe,KAAK,MAAM,YAAY,GACtC,YAAe,aAAa;AAEhC,eAAS,SAAS,IAAI,IAAI,SAAS,MAAM,MAAM;AAG/C,UAAI,WACA,WAAW,CAAC,GACZ,eAAe,SAAS,GACxB,IAAI,GACJ,IAAI,GACJ;AAEJ,WAAK,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAC5B,iBAAS,CAAC,IAAK,MAAM,IAAK;AAAA,MAC9B;AAEA,kBAAY,KAAK,MAAM,SAAS,SAAU,OAAO;AAC7C,YAAI,MAAM,SAAS,CAAC;AAEpB,aAAK;AAEL,YAAI,IAAI,KAAK;AACT,eAAK;AACL,eAAK;AAAA,QACT;AAEA,eAAO;AAAA,MACX,CAAC;AAGD,UAAID,IAAGC,IACH,OACA,OAAO,OAAO,OACd,OAAO,OAAO,OACd,OAAO,OAAO,OACd,OAAO,OAAO,OACd,iBAAiB,WAAW,GAC5B,kBAAkB,YAAY,GAC9B,IAAI,IAAI,IACR,IAAI,IAAI,IACR,IAAI,IAAI,IACR,IAAI,IAAI;AAEZ,WAAKA,KAAI,GAAGA,KAAI,WAAWA,MAAK,GAAG;AAC/B,aAAKD,KAAI,GAAGA,KAAI,UAAUA,MAAK,GAAG;AAE9B,kBAASC,KAAI,WAAWD,MAAM;AAE9B,kBAAQ,UAAU,KAAK;AACvB,kBAAQ,UAAU,QAAQ,CAAC;AAC3B,kBAAQ,UAAU,QAAQ,CAAC;AAG3B,kBAAQ,UAAU,KAAK;AACvB,kBAAQ,UAAU,KAAK;AACvB,kBAAQ,UAAU,KAAK;AAGvB,oBAAU,KAAK,IAAQ;AACvB,oBAAU,QAAQ,CAAC,IAAI;AACvB,oBAAU,QAAQ,CAAC,IAAI;AAGvB,kBAAQ,QAAQ;AAChB,kBAAQ,QAAQ;AAChB,kBAAQ,QAAQ;AAIhB,mBAAS,KAAK;AACd,cAAIA,KAAI,gBAAgB;AACpB,oBAAQ,UAAU,KAAK,IAAQ,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AAEnC,sBAAU,KAAK,IAAQ,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAAA,UACvE;AAGA,mBAAU,WAAW,KAAM;AAC3B,cAAIA,KAAI,KAAKC,KAAI,iBAAiB;AAC9B,oBAAQ,UAAU,KAAK,IAAQ,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AAEnC,sBAAU,KAAK,IAAQ,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAAA,UACvE;AAGA,mBAAS,KAAK;AACd,cAAIA,KAAI,iBAAiB;AACrB,oBAAQ,UAAU,KAAK,IAAQ,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AAEnC,sBAAU,KAAK,IAAQ,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAAA,UACvE;AAGA,mBAAS,KAAK;AACd,cAAID,KAAI,kBAAkBC,KAAI,iBAAiB;AAC3C,oBAAQ,UAAU,KAAK,IAAQ,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AACnC,oBAAQ,UAAU,QAAQ,CAAC,IAAI,IAAI;AAEnC,sBAAU,KAAK,IAAQ,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AACnE,sBAAU,QAAQ,CAAC,IAAI,QAAQ,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ;AAAA,UACvE;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,OAAO,SAAU,cAAc;AAExC,aAAO,KAAK,kBAAkB,cAAc,GAAG,GAAG;AAAA,QAC9C;AAAA,QAAI;AAAA,QAAI;AAAA,QACR;AAAA,QAAK;AAAA,QAAG;AAAA,QACR;AAAA,QAAI;AAAA,QAAI;AAAA,MACZ,CAAC;AAAA,IACL;AAEA,iBAAa,SAAS,SAAU,cAAc;AAC1C,aAAO,KAAK,kBAAkB,cAAc,GAAG,GAAG;AAAA,QAC9C;AAAA,QAAI;AAAA,QAAI;AAAA,QACR;AAAA,QAAK;AAAA,QAAG;AAAA,QACP;AAAA,QAAI;AAAA,QAAG;AAAA,MACZ,CAAC;AAAA,IACL;AAEA,iBAAa,SAAS,SAAU,cAAc;AAC1C,aAAO,KAAK,kBAAkB,cAAc,GAAG,GAAG;AAAA,QAC7C;AAAA,QAAG;AAAA,QAAK;AAAA,QACT;AAAA,QAAI;AAAA,QAAI;AAAA,QACP;AAAA,QAAG;AAAA,QAAK;AAAA,MACb,GAAG,IAAI,GAAG;AAAA,IACd;AAEA,iBAAa,OAAO,SAAU,cAAc,UAAU;AAClD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,UAAID,IAAGC,IAAG,UAAU,UAAU;AAE9B,WAAKA,KAAI,GAAGA,KAAI,WAAWA,MAAK,GAAG;AAC/B,aAAKD,KAAI,GAAGA,KAAI,UAAUA,MAAK,GAAG;AAC9B,qBAAYC,KAAI,WAAWD,MAAM;AACjC,cAAI,UAAU;AACV,wBAAa,YAAYC,KAAI,KAAK,WAAWD,MAAM;AAAA,UACvD,OACK;AACD,uBAAYC,KAAI,YAAY,WAAWD,KAAI,MAAO;AAAA,UACtD;AAEA,oBAAU,QAAQ,IAAQ,UAAU,QAAQ;AAC5C,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,QACpD;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,QAAQ,SAAU,cAAc,OAAO;AAChD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,gBAAS,MAAM,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAK,IAAI;AAClD,eAAO,QAAQ,MAAM,MAAM,QAAQ,MAAM;AAAA,MAC7C,CAAC;AAED,aAAO;AAAA,IACX;AAEA,iBAAa,YAAY,SAAU,cAAc;AAC7C,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AACnC,YAAI,YAAa,UAAU,CAAC,IAAI,QAAQ,UAAU,IAAI,CAAC,IAAI,QAAQ,UAAU,IAAI,CAAC,IAAI,QAAS;AAE/F,kBAAU,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI;AACrD,kBAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC;AAAA,MACtC;AAEA,aAAO;AAAA,IACX;AAOA,iBAAa,gBAAgB,SAAU,cAAc,UAAU,UAAU,WAAW;AAChF,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,kBAAY;AACZ,kBAAY;AACZ,mBAAa;AAEb,UAAI,WAAW,KAAK,MAAM;AAC1B,UAAI,WAAW,KAAK,MAAM;AAC1B,UAAI,GAAG,GAAG,GAAG,KAAK,KAAK;AAEvB,WAAK,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AAE/B,cAAM,SAAS,UAAU,CAAC,GAAG,UAAU,IAAI,CAAC,GAAG,UAAU,IAAI,CAAC,CAAC;AAG/D,YAAI,IAAI,CAAC,IAAI;AACb,eAAO,IAAI,GAAG;AACV,eAAK;AAAA,QACT;AACA,eAAO,IAAI,GAAG;AACV,eAAK;AAAA,QACT;AAGA,YAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI;AACtB,YAAI,IAAI,GAAG;AACP,cAAI;AAAA,QACR,WACS,IAAI,GAAG;AACZ,cAAI;AAAA,QACR;AAGA,YAAI,IAAI,CAAC;AACT,YAAI,YAAY,GAAG;AACf,gBAAM,IAAI,KAAK;AAAA,QACnB,WACS,YAAY,GAAG;AACpB,eAAK,IAAI;AAAA,QACb;AAGA,cAAM,SAAS,GAAG,GAAG,CAAC;AAEtB,kBAAU,CAAC,IAAQ,IAAI,CAAC;AACxB,kBAAU,IAAI,CAAC,IAAI,IAAI,CAAC;AACxB,kBAAU,IAAI,CAAC,IAAI,IAAI,CAAC;AACxB,kBAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC;AAAA,MACtC;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,SAAS,SAAU,cAAc;AAC1C,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,eAAO,MAAM;AAAA,MACjB,CAAC;AAED,aAAO;AAAA,IACX;AAEA,iBAAa,SAAS,SAAU,cAAc,WAAW;AACrD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,UAAI,OAAO,KAAK,KAAK,WAAW,SAAS,GACrC,OAAO,KAAK,KAAK,YAAY,SAAS,GACtC,KAAK,KACL,SAAS,OAAO,SAAS,OACzBA,IAAGC,IAAG,QAAQ,OAAO,MACrB,GAAG,GAAG,GAAG;AAEb,WAAK,MAAM,GAAG,MAAM,MAAM,OAAO,GAAG;AAChC,kBAAU,MAAM;AAChB,gBAAU,UAAU;AAEpB,YAAI,QAAQ,WAAW;AACnB,kBAAQ;AAAA,QACZ;AAEA,aAAK,MAAM,GAAG,MAAM,MAAM,OAAO,GAAG;AAChC,oBAAU,MAAM;AAChB,kBAAU,UAAU;AAEpB,cAAI,QAAQ,UAAU;AAClB,oBAAQ;AAAA,UACZ;AAGA,cAAI,IAAI,IAAI,IAAI;AAChB,kBAAQ,QAAQ,YAAY,QAAQ;AAEpC,eAAKA,KAAI,SAASA,KAAI,OAAOA,MAAK,GAAG;AACjC,qBAASA,KAAI;AAEb,iBAAKD,KAAI,SAASA,KAAI,OAAOA,MAAK,GAAG;AACjC,sBAAS,SAASA,MAAM;AACxB,mBAAK,UAAU,KAAK;AACpB,mBAAK,UAAU,QAAQ,CAAC;AACxB,mBAAK,UAAU,QAAQ,CAAC;AACxB,mBAAK,UAAU,QAAQ,CAAC;AAAA,YAC5B;AAAA,UACJ;AAEA,cAAK,IAAI,OAAQ,MAAM;AACvB,cAAK,IAAI,OAAQ,MAAM;AACvB,cAAK,IAAI,OAAQ,MAAM;AACvB,cAAK,IAAI,OAAQ,MAAM;AAGvB,eAAKC,KAAI,SAASA,KAAI,OAAOA,MAAK,GAAG;AACjC,qBAASA,KAAI;AAEb,iBAAKD,KAAI,SAASA,KAAI,OAAOA,MAAK,GAAG;AACjC,sBAAS,SAASA,MAAM;AACxB,wBAAU,KAAK,IAAQ;AACvB,wBAAU,QAAQ,CAAC,IAAI;AACvB,wBAAU,QAAQ,CAAC,IAAI;AACvB,wBAAU,QAAQ,CAAC,IAAI;AAAA,YAC3B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAMA,iBAAa,MAAM,SAAU,cAAc,OAAO,QAAQ;AACtD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,UAAI,QAAQ,GACR,KAAK,CAAC,GACN,KAAK,CAAC,GACN,KAAK,CAAC,GACN,KAAK,CAAC,GACN,KAAK,CAAC,GACN,KAAK,CAAC,GACNA,IAAGC,IAAG,GAAG,KAAK,KACd,UAAU,UAAU,QAAQ,UAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IACpB,GAAG,GAAG;AAEV,WAAKA,KAAI,GAAGA,KAAI,WAAWA,MAAK,GAAG;AAC/B,aAAKD,KAAI,GAAGA,KAAI,UAAUA,MAAK,GAAG;AAC9B,eAAK,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAC5B,eAAG,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI;AAAA,UACpD;AAEA,eAAK,MAAM,CAAC,OAAO,OAAO,OAAO,OAAO,GAAG;AACvC,uBAAWC,KAAI;AAEf,gBAAI,WAAW,KAAK,YAAY,WAAW;AACvC;AAAA,YACJ;AAEA,qBAAS,WAAW;AAEpB,iBAAK,MAAM,CAAC,OAAO,OAAO,OAAO,OAAO,GAAG;AACvC,yBAAWD,KAAI;AACf,kBAAI,WAAW,KAAK,YAAY,UAAU;AACtC;AAAA,cACJ;AAEA,yBAAY,SAAS,YAAa;AAClC,mBAAK,UAAU,QAAQ;AACvB,mBAAK,UAAU,WAAW,CAAC;AAC3B,mBAAK,UAAU,WAAW,CAAC;AAC3B,mBAAM,KAAK,UAAW;AACtB,mBAAM,KAAK,UAAW;AACtB,mBAAM,KAAK,UAAW;AACtB,iBAAG,EAAE,KAAK;AACV,iBAAG,EAAE,KAAK;AACV,iBAAG,EAAE,KAAK;AACV,iBAAG,EAAE,KAAK;AACV,iBAAG,EAAE,KAAK;AACV,iBAAG,EAAE,KAAK;AAAA,YACd;AAAA,UACJ;AAEA,cAAI,IAAI,IAAI;AACZ,eAAK,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAC5B,gBAAG,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG;AACd,kBAAI;AAAA,YACR;AACA,gBAAG,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG;AACd,kBAAI;AAAA,YACR;AACA,gBAAG,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG;AACd,kBAAI;AAAA,YACR;AAAA,UACJ;AAEA,oBAAU,KAAK,IAAQ,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI;AACvC,oBAAU,QAAQ,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI;AACvC,oBAAU,QAAQ,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI;AACvC,oBAAU,QAAQ,CAAC,IAAI,UAAU,QAAQ,CAAC;AAC1C,mBAAS;AAAA,QACb;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAEA,iBAAa,gBAAgB,SAAU,cAAc,SAAS;AAC1D,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AACnC,kBAAU,CAAC,IAAQ,UAAU,CAAC;AAC9B,kBAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC;AAClC,kBAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC;AAClC,kBAAU,IAAI,CAAC,IAAI;AAAA,MACvB;AAEA,aAAO;AAAA,IACX;AAKA,iBAAa,YAAY,SAAU,cAAc,QAAQ;AACrD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,eAAS,SAAS,IAAI,IAAI,SAAS,MAAM,MAAM;AAE/C,UAAI,WAAW,CAAC,GACZ,eAAe,SAAS,GACxB,IAAI,GACJ,IAAI,GACJ;AAEJ,WAAK,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAC5B,iBAAS,CAAC,IAAK,MAAM,IAAK;AAAA,MAC9B;AAEA,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,YAAI,MAAM,SAAS,CAAC;AAEpB,aAAK;AAEL,YAAI,IAAI,KAAK;AACT,eAAK;AACL,eAAK;AAAA,QACT;AAEA,eAAO;AAAA,MACX,CAAC;AAED,aAAO;AAAA,IACX;AAKA,iBAAa,UAAU,SAAU,cAAc,OAAO;AAClD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,iBAAS;AACT,eAAQ,QAAQ,MAAO,MAAM,QAAQ,MAAM;AAAA,MAC/C,CAAC;AAED,aAAO;AAAA,IACX;AAKA,iBAAa,wBAAwB,SAAU,cAAc,OAAO,QAAQ;AACxE,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,OAAO,MAAM,GACvD,YAAe,aAAa;AAEhC,UAAI,UAAU,WAAW,OACrB,UAAU,YAAY,QACtB,WAAW,GAAG,UACdA,IAAGC,IAAG;AAEV,WAAKA,KAAI,GAAGA,KAAI,QAAQA,MAAK,GAAG;AAC5B,kBAAWA,KAAI,UAAW,KAAK;AAE/B,aAAKD,KAAI,GAAGA,KAAI,OAAOA,MAAK,GAAG;AAC3B,qBAAY,SAASA,KAAI,WAAY;AAErC,oBAAU,QAAQ,IAAQ,UAAU,QAAQ;AAC5C,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,sBAAY;AAAA,QAChB;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAKA,iBAAa,SAAS,SAAU,cAAc,OAAO,QAAQ;AACzD,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,OAAO,MAAM,GACvD,YAAe,aAAa;AAEhC,UAAI,UAAU,WAAW,OACrB,UAAU,YAAY,QACtB,WAAW,GACXA,IAAGC;AAEP,WAAKA,KAAI,GAAGA,KAAI,QAAQA,MAAK,GAAG;AAC5B,aAAKD,KAAI,GAAGA,KAAI,OAAOA,MAAK,GAAG;AAC3B,eAAK,MAAM,aAAa,WAAWA,KAAI,SAASC,KAAI,SAAS,UAAU,WAAW,WAAW,UAAU,CAAC;AACxG,sBAAY;AAAA,QAChB;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AASA,iBAAa,gBAAgB,SAAU,cAAc,OAAO,QAAQ;AAChE,UAAI,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,SAAY,KAAK,MAAM,gBAAgB,GACvC,UAAY,KAAK,MAAM,iBAAiB,GACxC;AAEJ,aAAO,QAAS,KAAK,IAAI,UAAU,KAAK;AACxC,aAAO,SAAS,KAAK,IAAI,WAAW,MAAM;AAC1C,cAAQ,KAAK;AAEb,cAAQ,aAAa,cAAc,GAAG,CAAC;AACvC,cAAQ,MAAM,QAAQ,UAAU,SAAS,SAAS;AAClD,cAAQ,UAAU,QAAQ,GAAG,CAAC;AAE9B,qBAAe,QAAQ,aAAa,GAAG,GAAG,OAAO,MAAM;AAEvD,cAAQ,QAAQ;AAChB,aAAO,QAAQ;AACf,aAAO,SAAS;AAEhB,aAAO;AAAA,IACX;AAEA,iBAAa,QAAQ,SAAU,cAAc;AACzC,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,UAAI,GAAG,GAAG,GAAG,GAAG;AAEhB,WAAK,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AAC/B,YAAI,UAAU,CAAC;AACf,YAAI,UAAU,IAAI,CAAC;AACnB,YAAI,UAAU,IAAI,CAAC;AAEnB,kBAAU,CAAC,KAAS,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,SAAS,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ,MAAM;AAC3G,kBAAU,IAAI,CAAC,KAAK,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,SAAS,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ,MAAM;AAC3G,kBAAU,IAAI,CAAC,KAAK,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,SAAS,MAAM,MAAM,QAAQ,IAAI,IAAI,QAAQ,MAAM;AAC3G,kBAAU,IAAI,CAAC,IAAI,UAAU,IAAI,CAAC;AAAA,MACtC;AAEA,aAAO;AAAA,IACX;AAKA,iBAAa,UAAU,SAAU,cAAc,QAAQ;AAEnD,aAAO,KAAK,kBAAkB,cAAc,GAAG,GAAG;AAAA,QAC9C,CAAC,SAAO;AAAA,QAAQ,CAAC,SAAO;AAAA,QAAQ,CAAC,SAAO;AAAA,QACxC,CAAC,SAAO;AAAA,QAAS,SAAO,OAAK;AAAA,QAAG,CAAC,SAAO;AAAA,QACxC,CAAC,SAAO;AAAA,QAAQ,CAAC,SAAO;AAAA,QAAQ,CAAC,SAAO;AAAA,MAC5C,CAAC;AAAA,IACL;AAEA,iBAAa,WAAW,SAAU,cAAc;AAC5C,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAEhC,WAAK,MAAM,OAAO,WAAW,WAAW,SAAU,OAAO;AACrD,eAAO,QAAQ,OAAO,QAAQ,SAAS,KAAK,QAAQ,SAAS;AAAA,MACjE,CAAC;AAED,aAAO;AAAA,IACX;AAEA,iBAAa,YAAY,SAAU,cAAc;AAC7C,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,WAAW,QAAQ,GAC7D,YAAe,aAAa;AAEhC,UAAI,UAAU;AAEd,WAAK,IAAI,GAAG,IAAI,WAAW,KAAK,GAAG;AAC/B,aAAK,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AAC9B,qBAAY,IAAI,WAAW,KAAM;AACjC,qBAAY,IAAI,YAAY,KAAM;AAElC,oBAAU,QAAQ,IAAQ,UAAU,QAAQ;AAC5C,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,oBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,QACpD;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AASA,iBAAa,QAAQ,SAAU,cAAc,SAAS,SAAS,QAAQ,OAAO,MAAM,QAAQ;AACxF,UAAI,YAAe,aAAa,MAC5B,WAAe,aAAa,OAC5B,YAAe,aAAa,QAC5B,YAAe,UAAU,QACzB,eAAe,KAAK,MAAM,gBAAgB,UAAU,SAAS,GAC7D,YAAe,aAAa;AAGhC,gBAAU,WAAY;AACtB,gBAAU,YAAY;AAGtB,eAAU,KAAK,KAAK;AAEpB,UAAI,UAAU,SAAS,QACnB,QAAQ,YAAY,GACpB,QAAQ,WAAW,GACnB,WAAW,GACXD,IAAGC,IAAG,IAAI,IAAI,UAAU,GAAG,IAAI,IAAI,UAAU,OAAO;AAExD,WAAKA,KAAI,GAAGA,KAAI,WAAWA,MAAK,GAAG;AAC/B,aAAKD,KAAI,GAAGA,KAAI,UAAUA,MAAK,GAAG;AAC9B,eAAKA,KAAI;AACT,eAAKC,KAAI;AACT,qBAAW,KAAK,KAAK,KAAK;AAE1B,cAAI,WAAW,SAAS;AAEpB,sBAAU,QAAQ,IAAQ,UAAU,QAAQ;AAC5C,sBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,sBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,sBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,UACpD,OACK;AAED,uBAAW,KAAK,KAAK,QAAQ;AAC7B,gBAAK,KAAK,MAAM,IAAI,EAAE,IAAK,SAAS,SAAS,YAAa;AAC1D,iBAAK,UAAU,WAAW,KAAK,IAAI,CAAC;AACpC,iBAAK,UAAU,WAAW,KAAK,IAAI,CAAC;AAGpC,gBAAI,QAAQ;AAER,mBAAK,MAAM,aAAa,WAAW,IAAI,IAAI,UAAU,WAAW,WAAW,UAAU,IAAI;AAAA,YAC7F,OACK;AAID,0BAAa,KAAK,MAAM,KAAK,YAAY,KAAK,MAAM,MAAO;AAC3D,wBAAU,QAAQ,IAAQ,UAAU,QAAQ;AAC5C,wBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,wBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAChD,wBAAU,WAAW,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,YACpD;AAAA,UACJ;AAEA,sBAAY;AAAA,QAChB;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": ["x", "y"]
}
